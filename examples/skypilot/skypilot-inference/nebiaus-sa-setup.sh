#!/bin/bash
# nebiaus-sa-setup.sh: Create a Nebius service account and configure global AWS profiles for Nebius S3
# Usage: ./nebiaus-sa-setup.sh
set -euo pipefail  # Fail fast: exit on error, unset vars, and pipeline failures

HEADER="# Auto-generated by nebiaus-sa-setup.sh — created locally; review and update values as needed"
if [ ! -f .env ]; then
  if [ -f .template.env ]; then
    { echo "$HEADER"; cat .template.env; } > .env
    echo "Created .env from .template.env. Please review and update values if needed."
  else
    echo "Error: .env not found and .template.env missing. Please add them to continue."
    exit 1
  fi
fi

set -a; . ./.env; set +a
echo "Loaded .env environment variables."

INVALID=0
if [ "${TENANT_ID:-}" = "tenant-EXAMPLE_ID" ]; then echo "Error: TENANT_ID placeholder" >&2; INVALID=1; fi
if [ "${PROJECT_ID:-}" = "project-EXAMPLE_ID" ]; then echo "Error: PROJECT_ID placeholder" >&2; INVALID=1; fi
if [ "${JUMP_HOST_IP:-REPLACE_WITH_JUMP_HOST_IP}" = "REPLACE_WITH_JUMP_HOST_IP" ]; then
  echo "Warning: JUMP_HOST_IP is still a placeholder." >&2
fi
if [ "$INVALID" -eq 1 ]; then exit 1; fi

# Ensure direnv is installed, hooked, and this project is allowed (idempotent, best-effort).
# This lets your shell auto-load `.env` on cd into this folder.
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if command -v direnv >/dev/null 2>&1; then
  # Install zsh hook if missing
  if [ -n "${SHELL:-}" ] && [ "$(basename "$SHELL")" = "zsh" ]; then
    if [ -f "$HOME/.zshrc" ] && ! grep -qs 'direnv hook zsh' "$HOME/.zshrc"; then
      echo 'eval "$(direnv hook zsh)"' >> "$HOME/.zshrc"
      echo "Added direnv zsh hook to ~/.zshrc (restart your shell to activate)."
    fi
  fi
  # Approve .envrc in this project (safe; only after your review of the file)
  if [ -f "$SCRIPT_DIR/.envrc" ]; then
    (cd "$SCRIPT_DIR" && direnv allow) || true
  fi
else
  # Try to install direnv on macOS via Homebrew if available
  if command -v brew >/dev/null 2>&1; then
    echo "direnv not found; attempting Homebrew install..."
    brew install direnv || echo "Warning: failed to install direnv via Homebrew. Install manually if desired."
    if command -v direnv >/dev/null 2>&1; then
      if [ -f "$HOME/.zshrc" ] && ! grep -qs 'direnv hook zsh' "$HOME/.zshrc"; then
        echo 'eval "$(direnv hook zsh)"' >> "$HOME/.zshrc"
        echo "Added direnv zsh hook to ~/.zshrc (restart your shell to activate)."
      fi
      if [ -f "$SCRIPT_DIR/.envrc" ]; then
        (cd "$SCRIPT_DIR" && direnv allow) || true
      fi
    else
      echo "direnv is optional. You can install it later (macOS: brew install direnv) and run 'direnv allow' in this folder."
    fi
  else
    echo "direnv not found (optional). Install it and run 'direnv allow' in this folder if you want auto-loading of .env."
  fi
fi

if [ -z "${PROJECT_ID:-}" ] || [ -z "${TENANT_ID:-}" ]; then
  echo "Error: PROJECT_ID and TENANT_ID must be set in your environment (.env)."; exit 1
fi

echo "$TENANT_ID" > "$HOME/.nebius/NEBIUS_TENANT_ID.txt"
echo "Saved TENANT_ID to $HOME/.nebius/NEBIUS_TENANT_ID.txt"

SERVICE_ACCOUNT_NAME="skypilot-sa"
CREDENTIALS_DIR="$HOME/.nebius"
CREDENTIALS_FILE="$CREDENTIALS_DIR/credentials.json"
mkdir -p "$CREDENTIALS_DIR"

echo "Step 1: Checking if service account exists..."
SA_JSON=$(nebius iam service-account get-by-name --parent-id "$PROJECT_ID" --name "$SERVICE_ACCOUNT_NAME" --format json 2>/dev/null || echo '{"metadata":{"id":""}}')
SA_ID=$(echo "$SA_JSON" | jq -r ".metadata.id")
if [ -z "$SA_ID" ] || [ "$SA_ID" == "null" ]; then
  echo "   Creating service account '$SERVICE_ACCOUNT_NAME'..."
  SA_JSON=$(nebius iam service-account create --parent-id "$PROJECT_ID" --name "$SERVICE_ACCOUNT_NAME" --format json)
  SA_ID=$(echo "$SA_JSON" | jq -r '.metadata.id')
  echo "   Service account created with ID: $SA_ID"
  echo "   Granting editor access to the service account..."
  EDITORS_GROUP_ID=$(nebius iam group get-by-name --name editors --parent-id "$TENANT_ID" --format json | jq -r '.metadata.id')
  nebius iam group-membership create --parent-id "$EDITORS_GROUP_ID" --member-id "$SA_ID" > /dev/null 2>&1
  echo "   Editor access granted to service account."
else
  echo "   Found existing service account ID: $SA_ID"
fi

echo "Step 2: Generating service account key for compute (JSON credentials)..."

nebius iam auth-public-key generate \
  --parent-id "$PROJECT_ID" \
  --service-account-id "$SA_ID" \
  --output "$CREDENTIALS_FILE"

# Validate JSON and secure permissions
if ! jq empty "$CREDENTIALS_FILE" >/dev/null 2>&1; then
  echo "Error: Generated credentials at $CREDENTIALS_FILE are not valid JSON; cannot enable compute." >&2
  exit 1
fi
chmod 600 "$CREDENTIALS_FILE" || true
echo "   Service account credentials saved to $CREDENTIALS_FILE (JSON)."

if ! command -v nebius >/dev/null 2>&1; then echo "Error: Nebius CLI missing" >&2; exit 1; fi
if ! command -v jq >/dev/null 2>&1; then echo "Error: jq missing (brew install jq)" >&2; exit 1; fi
:
: "${REGION_ID:?REGION_ID must be set in your environment (.env).}"
if ! command -v aws >/dev/null 2>&1; then echo "Error: aws CLI not installed. Install AWS CLI and rerun." >&2; exit 1; fi

echo "Step 3: Configuring Nebius Object Storage access for region: ${REGION_ID} (global ~/.aws)"
PROJECT_DIR="$SCRIPT_DIR"
GLOBAL_AWS_DIR="$HOME/.aws"
mkdir -p "$GLOBAL_AWS_DIR"
unset AWS_CONFIG_FILE AWS_SHARED_CREDENTIALS_FILE || true
CONFIG_PATH="$GLOBAL_AWS_DIR/config"; CREDS_PATH="$GLOBAL_AWS_DIR/credentials"
if [ -f "$CONFIG_PATH" ]; then cp "$CONFIG_PATH" "${CONFIG_PATH}.bak" 2>/dev/null || true; chmod 600 "${CONFIG_PATH}.bak" 2>/dev/null || true; fi
if [ -f "$CREDS_PATH" ]; then cp "$CREDS_PATH" "${CREDS_PATH}.bak" 2>/dev/null || true; chmod 600 "${CREDS_PATH}.bak" 2>/dev/null || true; fi

echo "   Creating access key for profile 'nebius-${REGION_ID}'..."
ACCESS_KEY_ID=$(nebius iam v2 access-key create --parent-id "$PROJECT_ID" --account-service-account-id "$SA_ID" --description "AWS CLI - ${REGION_ID} region" --format json | jq -r '.metadata.id')
ACCESS_KEY_AWS_ID=$(nebius iam v2 access-key get --id "$ACCESS_KEY_ID" --format json | jq -r '.status.aws_access_key_id')
SECRET_ACCESS_KEY=$(nebius iam v2 access-key get --id "$ACCESS_KEY_ID" --format json | jq -r '.status.secret')

PROFILE_NAME="nebius-${REGION_ID}"
aws configure set aws_access_key_id "$ACCESS_KEY_AWS_ID" --profile "$PROFILE_NAME"
aws configure set aws_secret_access_key "$SECRET_ACCESS_KEY" --profile "$PROFILE_NAME"
aws configure set region "$REGION_ID" --profile "$PROFILE_NAME"
aws configure set endpoint_url "https://storage.${REGION_ID}.nebius.cloud:443" --profile "$PROFILE_NAME"
echo "   Profile '$PROFILE_NAME' configured (region + endpoint_url)."

BASE_PROFILE="nebius"
aws configure set aws_access_key_id "$ACCESS_KEY_AWS_ID" --profile "$BASE_PROFILE"
aws configure set aws_secret_access_key "$SECRET_ACCESS_KEY" --profile "$BASE_PROFILE"
aws configure set region "$REGION_ID" --profile "$BASE_PROFILE"
aws configure set endpoint_url "https://storage.${REGION_ID}.nebius.cloud:443" --profile "$BASE_PROFILE"
echo "   Profile '$BASE_PROFILE' configured (region + endpoint_url)."

GREEN='\033[0;32m'; NC='\033[0m'
printf "${GREEN}✔ Nebius setup completed successfully. Region: %s | Profiles: %s, %s${NC}\n" "$REGION_ID" "$PROFILE_NAME" "$BASE_PROFILE"
